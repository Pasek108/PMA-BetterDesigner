"use strict";function applyPagesPorting(){pagesPorting();new MutationObserver(pagesPorting).observe(document.querySelector("#page_content"),{childList:!0})}function pagesPorting(){if(!BetterDesigner.isOnDesignerPage())return;const e=document.querySelector("#name-panel");if(e.querySelectorAll(".porting").length>0)return;const t=document.createElement("link");t.rel="stylesheet",t.href="BetterDesigner/Styles/pages_porting.css",document.head.appendChild(t);const n=document.createElement("button");n.className="porting",n.title="Import/export pages",n.addEventListener("click",(()=>BetterDesigner.modal.openModal("pages_porting"))),e.appendChild(n),setTimeout((()=>{const e=document.createElement("img");e.src="BetterDesigner/Images/import-export-icon.png",n.appendChild(e)}),500),BetterDesigner.modal.export_button.addEventListener("click",exportPages),BetterDesigner.modal.import_button.addEventListener("click",importPages)}function exportPages(){const e=new URL(window.location.href).searchParams.get("db"),t=["table_coords","pdf_pages"];indexedDB.open("pma_designer").onsuccess=n=>{const o=n.target.result;let r={};const s=o.transaction(t,"readonly"),a=s.objectStore(t[0]),c=s.objectStore(t[1]),i=a.getAll(),d=c.getAll();i.onsuccess=()=>{r[t[0]]=i.result.filter((t=>t.dbName==e)),d.onsuccess=()=>{r[t[1]]=d.result.filter((t=>t.dbName==e));const n=document.createElement("a");n.download=`${e}_exported_pages.txt`,n.target="_blank",n.href=`data:text/plain;charset=utf-8,${encodeURIComponent(JSON.stringify(r))}`,document.head.appendChild(n),window.requestAnimationFrame((()=>{const t=new MouseEvent("click");n.dispatchEvent(t),document.head.removeChild(n),alert(`Pages for '${e}' databse exported.`)}))}}}}function importPages(){const e=BetterDesigner.modal.import_input;if(e.files.length){const t=new FileReader;t.onload=e=>{const t=JSON.parse(e.target.result),n=["table_coords","pdf_pages"],o=indexedDB.open("pma_designer");o.onsuccess=function(e){const o=e.target.result.transaction(n,"readwrite");let r=o.objectStore(n[0]),s=o.objectStore(n[1]);t[n[0]].forEach((e=>r.put(e))),t[n[1]].forEach((e=>s.put(e)));const a=t[n[0]][0].dbName;o.oncomplete=()=>alert(`Pages for '${a}' databse imported.`),o.onerror=e=>{}},o.onerror=e=>{}},t.readAsText(e.files[0])}}